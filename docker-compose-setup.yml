services:
  # Setup container that creates folder structure and config files
  setup:
    image: alpine:latest
    container_name: pangolin-setup
    volumes:
      - ./:/host-setup
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      # Required variables
      - DOMAIN=${DOMAIN:-}
      - EMAIL=${EMAIL:-}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-}
      # Important variables with defaults that you might want to customize
      - ADMIN_SUBDOMAIN=${ADMIN_SUBDOMAIN:-pangolin}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=${POSTGRES_HOST:-pangolin-postgres}
      # Optional features
      - CROWDSEC_ENROLLMENT_KEY=${CROWDSEC_ENROLLMENT_KEY:-}
      - STATIC_PAGE_DOMAIN=${STATIC_PAGE_DOMAIN:-}
      # OAuth configuration (if needed)
      - CLIENT_ID=${CLIENT_ID:-}
      - CLIENT_SECRET=${CLIENT_SECRET:-}
      # Komodo integration (if needed)
      - KOMODO_HOST_IP=${KOMODO_HOST_IP:-} # if set you must use komodo-postgres-1 as the POSTGRES_HOST
      # OpenAI API Key for nlweb (if needed)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # Orchestrator selection (optional). If unset, it will be auto-derived from provided env vars.
      - COMPONENTS=${COMPONENTS:-}
      # Additional optional variables used by components
      - OAUTH_DOMAIN=${OAUTH_DOMAIN:-oauth.${DOMAIN}}
      - COMPOSE_KOMODO_IMAGE_TAG=${COMPOSE_KOMODO_IMAGE_TAG:-latest}
      - TZ=${TZ:-Etc/UTC}
      - KOMODO_PASSKEY=${KOMODO_PASSKEY:-}
      - KOMODO_TITLE=${KOMODO_TITLE:-}
      - KOMODO_FIRST_SERVER=${KOMODO_FIRST_SERVER:-}
      - KOMODO_DISABLE_CONFIRM_DIALOG=${KOMODO_DISABLE_CONFIRM_DIALOG:-}
      - KOMODO_MONITORING_INTERVAL=${KOMODO_MONITORING_INTERVAL:-}
      - KOMODO_RESOURCE_POLL_INTERVAL=${KOMODO_RESOURCE_POLL_INTERVAL:-}
      - KOMODO_WEBHOOK_SECRET=${KOMODO_WEBHOOK_SECRET:-}
      - KOMODO_JWT_SECRET=${KOMODO_JWT_SECRET:-}
      - KOMODO_JWT_TTL=${KOMODO_JWT_TTL:-}
      - KOMODO_LOCAL_AUTH=${KOMODO_LOCAL_AUTH:-}
      - KOMODO_DISABLE_USER_REGISTRATION=${KOMODO_DISABLE_USER_REGISTRATION:-}
      - KOMODO_ENABLE_NEW_USERS=${KOMODO_ENABLE_NEW_USERS:-}
      - KOMODO_DISABLE_NON_ADMIN_CREATE=${KOMODO_DISABLE_NON_ADMIN_CREATE:-}
      - KOMODO_TRANSPARENT_MODE=${KOMODO_TRANSPARENT_MODE:-}
      - KOMODO_LOGGING_PRETTY=${KOMODO_LOGGING_PRETTY:-}
      - KOMODO_PRETTY_STARTUP_CONFIG=${KOMODO_PRETTY_STARTUP_CONFIG:-}
      - KOMODO_OIDC_ENABLED=${KOMODO_OIDC_ENABLED:-}
      - KOMODO_GITHUB_OAUTH_ENABLED=${KOMODO_GITHUB_OAUTH_ENABLED:-}
      - KOMODO_GOOGLE_OAUTH_ENABLED=${KOMODO_GOOGLE_OAUTH_ENABLED:-}
      - KOMODO_AWS_ACCESS_KEY_ID=${KOMODO_AWS_ACCESS_KEY_ID:-}
      - KOMODO_AWS_SECRET_ACCESS_KEY=${KOMODO_AWS_SECRET_ACCESS_KEY:-}

    command: |
      sh -c "
        echo '🚀 Starting Pangolin setup container (modular orchestrator only)...'

        # Install required tools
        apk add --no-cache bash gettext curl docker-cli openssl

        # Validate required environment variables
        if [ -z \"$$DOMAIN\" ] || [ -z \"$$EMAIL\" ] || [ -z \"$$ADMIN_USERNAME\" ] || [ -z \"$$ADMIN_PASSWORD\" ]; then
          echo '❌ Error: Required environment variables not set!'
          echo 'Usage: DOMAIN=example.com EMAIL=admin@example.com ADMIN_USERNAME=admin@example.com ADMIN_PASSWORD=mypassword docker compose -f docker-compose-setup.yml up'
          echo 'Required variables:'
          echo '  DOMAIN - Your domain name (e.g., example.com)'
          echo '  EMAIL - Email for Lets Encrypt certificates'
          echo '  ADMIN_USERNAME - Admin username for Pangolin (usually email)'
          echo '  ADMIN_PASSWORD - Admin password for Pangolin (min 8 chars)'
          echo 'Optional variables:'
          echo '  ADMIN_SUBDOMAIN - Subdomain for admin portal (default: pangolin)'
          exit 1
        fi

        # Check if config folder already exists
        if [ -d \"/host-setup/config\" ]; then
          echo '⚠️ Config folder already exists!'
          echo 'To avoid overwriting your configuration, setup will not proceed.'
          echo 'If you want to run setup again, please remove or rename the existing config folder.'
          exit 1
        fi

        # Validate domain format
        if ! echo \"$$DOMAIN\" | grep -E '^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?\\.[a-zA-Z]{2,}$$' > /dev/null; then
          echo '❌ Error: Invalid domain format'
          exit 1
        fi

        # Validate email format
        if ! echo \"$$EMAIL\" | grep -E '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$$' > /dev/null; then
          echo '❌ Error: Invalid email format'
          exit 1
        fi

        # Validate username as email format
        if ! echo \"$$ADMIN_USERNAME\" | grep -E '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$$' > /dev/null; then
          echo '❌ Error: Invalid admin username email format'
          exit 1
        fi

        # Validate password length
        if [ $${#ADMIN_PASSWORD} -lt 8 ]; then
          echo '❌ Error: Password must be at least 8 characters long'
          exit 1
        fi

        echo '✅ Environment variables validated'

        # Run modular orchestrator (refactored system)
        if [ -f "/host-setup/orchestrator/build-compose.sh" ]; then
          echo '🔧 Running modular orchestrator...'
          # Ensure required tools for orchestrator and generated scripts
          apk add --no-cache bash gettext curl docker-cli openssl || true

          # Derive COMPONENTS if not provided
          if [ -z "${COMPONENTS}" ]; then
            COMPONENTS="pangolin"
            if [ -n "${CROWDSEC_ENROLLMENT_KEY}" ]; then COMPONENTS="${COMPONENTS},crowdsec"; fi
            if [ -n "${CLIENT_ID}" ] && [ -n "${CLIENT_SECRET}" ]; then COMPONENTS="${COMPONENTS},mcpauth"; fi
            if [ -n "${OPENAI_API_KEY}" ]; then COMPONENTS="${COMPONENTS},nlweb"; fi
            if [ -n "${KOMODO_HOST_IP}" ]; then COMPONENTS="${COMPONENTS},komodo"; fi
            export COMPONENTS
          fi

          chmod +x /host-setup/orchestrator/build-compose.sh
          OUTPUT_DIR="/host-setup" /bin/bash /host-setup/orchestrator/build-compose.sh || exit 1
          echo '✅ Orchestrator finished.'
          # Exit to avoid running legacy monolithic generation
          exit 0
        fi





        # Part 4: Conditionally append Komodo services if KOMODO_HOST_IP is set
        if [ -n \"$KOMODO_HOST_IP\" ]; then
          echo '🦎 Adding Komodo services...'
          cat >> /host-setup/compose.yaml << EOF

          # Komodo Database Services
          postgres:
            image: ghcr.io/ferretdb/postgres-documentdb
            container_name: komodo-postgres-1
            labels:
              komodo.skip: # Prevent Komodo from stopping with StopAllContainers
            restart: unless-stopped
            volumes:
              - postgres-data:/var/lib/postgresql/data
            environment:
              POSTGRES_USER: REPLACE_WITH_POSTGRES_USER
              POSTGRES_PASSWORD: REPLACE_WITH_POSTGRES_PASSWORD
              POSTGRES_DB: postgres
            healthcheck:
              test: [\"CMD-SHELL\", \"pg_isready -U REPLACE_WITH_POSTGRES_USER\"]
              interval: 10s
              timeout: 5s
              retries: 5

          ferretdb:
            image: ghcr.io/ferretdb/ferretdb
            container_name: komodo-ferretdb-1
            labels:
              komodo.skip: # Prevent Komodo from stopping with StopAllContainers
            restart: unless-stopped
            depends_on:
              - postgres
            volumes:
              - ferretdb-state:/state
            environment:
              FERRETDB_POSTGRESQL_URL: postgres://REPLACE_WITH_POSTGRES_USER:REPLACE_WITH_POSTGRES_PASSWORD@postgres:5432/postgres

          # Komodo Core
          komodo-core:
            image: ghcr.io/moghtech/komodo-core:\$\{COMPOSE_KOMODO_IMAGE_TAG:-latest}
            container_name: komodo-core-1
            labels:
              komodo.skip: # Prevent Komodo from stopping with StopAllContainers
            restart: unless-stopped
            depends_on:
              - ferretdb
            ports:
              - 9120:9120
            environment:
              KOMODO_DATABASE_ADDRESS: ferretdb:27017
              KOMODO_DATABASE_USERNAME: REPLACE_WITH_POSTGRES_USER
              KOMODO_DATABASE_PASSWORD: REPLACE_WITH_POSTGRES_PASSWORD
              KOMODO_PASSKEY: REPLACE_WITH_KOMODO_PASSKEY
              TZ: ${TZ:-Etc/UTC}
              KOMODO_HOST: https://komodo.\$\{DOMAIN}
              KOMODO_TITLE: \$\{KOMODO_TITLE:-Komodo}
              KOMODO_FIRST_SERVER: \$\{KOMODO_FIRST_SERVER}
              KOMODO_DISABLE_CONFIRM_DIALOG: \$\{KOMODO_DISABLE_CONFIRM_DIALOG:-false}
              KOMODO_MONITORING_INTERVAL: \$\{KOMODO_MONITORING_INTERVAL:-15-sec}
              KOMODO_RESOURCE_POLL_INTERVAL: \$\{KOMODO_RESOURCE_POLL_INTERVAL:-1-hr}
              KOMODO_WEBHOOK_SECRET: \$\{KOMODO_WEBHOOK_SECRET}
              KOMODO_JWT_SECRET: \$\{KOMODO_JWT_SECRET}
              KOMODO_JWT_TTL: \$\{KOMODO_JWT_TTL:-1-day}
              KOMODO_LOCAL_AUTH: \$\{KOMODO_LOCAL_AUTH:-true}
              KOMODO_DISABLE_USER_REGISTRATION: \$\{KOMODO_DISABLE_USER_REGISTRATION:-false}
              KOMODO_ENABLE_NEW_USERS: \$\{KOMODO_ENABLE_NEW_USERS:-false}
              KOMODO_DISABLE_NON_ADMIN_CREATE: \$\{KOMODO_DISABLE_NON_ADMIN_CREATE:-false}
              KOMODO_TRANSPARENT_MODE: \$\{KOMODO_TRANSPARENT_MODE:-false}
              KOMODO_LOGGING_PRETTY: \$\{KOMODO_LOGGING_PRETTY:-false}
              KOMODO_PRETTY_STARTUP_CONFIG: \$\{KOMODO_PRETTY_STARTUP_CONFIG:-false}
              KOMODO_OIDC_ENABLED: \$\{KOMODO_OIDC_ENABLED:-false}
              KOMODO_GITHUB_OAUTH_ENABLED: \$\{KOMODO_GITHUB_OAUTH_ENABLED:-false}
              KOMODO_GOOGLE_OAUTH_ENABLED: \$\{KOMODO_GOOGLE_OAUTH_ENABLED:-false}
              KOMODO_AWS_ACCESS_KEY_ID: \$\{KOMODO_AWS_ACCESS_KEY_ID}
              KOMODO_AWS_SECRET_ACCESS_KEY: \$\{KOMODO_AWS_SECRET_ACCESS_KEY}
            volumes:
              - repo-cache:/repo-cache


      EOF

        fi

        # Part 5: Add volumes section if Komodo services are enabled
        if [ -n \"$KOMODO_HOST_IP\" ]; then
          echo '🦎 Adding Komodo volumes...'
          cat >> /host-setup/compose.yaml << EOF

        volumes:
          # Komodo volumes
          postgres-data:
            driver: local
          ferretdb-state:
            driver: local
          repo-cache:
            driver: local

      EOF
        fi

        # Append network block (always)
        echo '📝 Append network block - need to externally create network using docker network create pangolin'
        cat >> /host-setup/compose.yaml << 'EOF'
        networks:
          default:
            external: true
            name: pangolin
            enable_ipv6: true
      EOF

         # Replace placeholders with actual variable syntax
        sed -i 's/REPLACE_WITH_CLIENT_ID/$$\{CLIENT_ID}/g' /host-setup/compose.yaml
        sed -i 's/REPLACE_WITH_CLIENT_SECRET/$$\{CLIENT_SECRET}/g' /host-setup/compose.yaml
        sed -i 's/REPLACE_WITH_POSTGRES_USER/$$\{POSTGRES_USER}/g' /host-setup/compose.yaml
        sed -i 's/REPLACE_WITH_POSTGRES_PASSWORD/$$\{POSTGRES_PASSWORD}/g' /host-setup/compose.yaml
        sed -i 's/REPLACE_WITH_CROWDSEC_ENROLLMENT_KEY/$$\{CROWDSEC_ENROLLMENT_KEY}/g' /host-setup/compose.yaml
        sed -i 's/REPLACE_WITH_KOMODO_PASSKEY/$$\{KOMODO_PASSKEY}/g' /host-setup/compose.yaml

        echo '✅ Setup completed! The stack is ready to start.'
        echo '📊 Start your services with: docker compose up -d'
        echo '🌐 Access at: https://'"$$ADMIN_SUBDOMAIN"'.'"$$DOMAIN"
        echo '👤 Admin login: '"$$ADMIN_USERNAME"

        # Keep container running briefly to show completion message
        sleep 5

      "
    restart: "no"