services:
  # Setup container that creates folder structure and config files
  setup:
    image: alpine:latest
    container_name: pangolin-setup
    volumes:
      - ./:/host-setup
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      # Required variables
      - DOMAIN=${DOMAIN:-}
      - EMAIL=${EMAIL:-}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-}
      # Important variables with defaults that you might want to customize
      - ADMIN_SUBDOMAIN=${ADMIN_SUBDOMAIN:-pangolin}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=${POSTGRES_HOST:-pangolin-postgres}
      # Optional features
      - CROWDSEC_ENROLLMENT_KEY=${CROWDSEC_ENROLLMENT_KEY:-}
      - STATIC_PAGE_DOMAIN=${STATIC_PAGE_DOMAIN:-}
      # OAuth configuration (if needed)
      - CLIENT_ID=${CLIENT_ID:-}
      - CLIENT_SECRET=${CLIENT_SECRET:-}
      # Komodo integration (if needed)
      - KOMODO_HOST_IP=${KOMODO_HOST_IP:-} # if set you must use komodo-postgres-1 as the POSTGRES_HOST
      # OpenAI API Key for nlweb (if needed)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # Orchestrator selection (optional). If unset, it will be auto-derived from provided env vars.
      - COMPONENTS=${COMPONENTS:-}
      # Additional optional variables used by components
      - OAUTH_DOMAIN=${OAUTH_DOMAIN:-oauth.${DOMAIN}}
      - COMPOSE_KOMODO_IMAGE_TAG=${COMPOSE_KOMODO_IMAGE_TAG:-latest}
      - TZ=${TZ:-Etc/UTC}
      - KOMODO_PASSKEY=${KOMODO_PASSKEY:-}
      - KOMODO_TITLE=${KOMODO_TITLE:-}
      - KOMODO_FIRST_SERVER=${KOMODO_FIRST_SERVER:-}
      - KOMODO_DISABLE_CONFIRM_DIALOG=${KOMODO_DISABLE_CONFIRM_DIALOG:-}
      - KOMODO_MONITORING_INTERVAL=${KOMODO_MONITORING_INTERVAL:-}
      - KOMODO_RESOURCE_POLL_INTERVAL=${KOMODO_RESOURCE_POLL_INTERVAL:-}
      - KOMODO_WEBHOOK_SECRET=${KOMODO_WEBHOOK_SECRET:-}
      - KOMODO_JWT_SECRET=${KOMODO_JWT_SECRET:-}
      - KOMODO_JWT_TTL=${KOMODO_JWT_TTL:-}
      - KOMODO_LOCAL_AUTH=${KOMODO_LOCAL_AUTH:-}
      - KOMODO_DISABLE_USER_REGISTRATION=${KOMODO_DISABLE_USER_REGISTRATION:-}
      - KOMODO_ENABLE_NEW_USERS=${KOMODO_ENABLE_NEW_USERS:-}
      - KOMODO_DISABLE_NON_ADMIN_CREATE=${KOMODO_DISABLE_NON_ADMIN_CREATE:-}
      - KOMODO_TRANSPARENT_MODE=${KOMODO_TRANSPARENT_MODE:-}
      - KOMODO_LOGGING_PRETTY=${KOMODO_LOGGING_PRETTY:-}
      - KOMODO_PRETTY_STARTUP_CONFIG=${KOMODO_PRETTY_STARTUP_CONFIG:-}
      - KOMODO_OIDC_ENABLED=${KOMODO_OIDC_ENABLED:-}
      - KOMODO_GITHUB_OAUTH_ENABLED=${KOMODO_GITHUB_OAUTH_ENABLED:-}
      - KOMODO_GOOGLE_OAUTH_ENABLED=${KOMODO_GOOGLE_OAUTH_ENABLED:-}
      - KOMODO_AWS_ACCESS_KEY_ID=${KOMODO_AWS_ACCESS_KEY_ID:-}
      - KOMODO_AWS_SECRET_ACCESS_KEY=${KOMODO_AWS_SECRET_ACCESS_KEY:-}

    command: |
      sh -c "
        echo 'üöÄ Starting Pangolin setup container (modular orchestrator only)...'

        # Install required tools
        apk add --no-cache bash gettext curl docker-cli openssl

        # Validate required environment variables
        if [ -z \"$$DOMAIN\" ] || [ -z \"$$EMAIL\" ] ; then
          echo '‚ùå Error: Required environment variables not set!'
          echo 'Usage: DOMAIN=example.com EMAIL=admin@example.com ADMIN_USERNAME=admin@example.com ADMIN_PASSWORD=mypassword docker compose -f docker-compose-setup.yml up'
          echo 'Required variables:'
          echo '  DOMAIN - Your domain name (e.g., example.com)'
          echo '  EMAIL - Email for Lets Encrypt certificates'
          echo 'Optional variables:'
          echo '  ADMIN_SUBDOMAIN - Subdomain for admin portal (default: pangolin)'
          echo '  ADMIN_USERNAME - Admin username for Pangolin (usually email)'
          echo '  ADMIN_PASSWORD - Admin password for Pangolin (min 8 chars)'
          exit 1
        fi

        # Check if config folder already exists
        if [ -d \"/host-setup/config\" ]; then
          echo '‚ö†Ô∏è Config folder already exists!'
          echo 'To avoid overwriting your configuration, setup will not proceed.'
          echo 'If you want to run setup again, please remove or rename the existing config folder.'
          exit 1
        fi

        # Validate domain format
        if ! echo \"$$DOMAIN\" | grep -E '^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?\\.[a-zA-Z]{2,}$$' > /dev/null; then
          echo '‚ùå Error: Invalid domain format'
          exit 1
        fi

        # Validate email format
        if ! echo \"$$EMAIL\" | grep -E '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$$' > /dev/null; then
          echo '‚ùå Error: Invalid email format'
          exit 1
        fi

        # Validate [optional] username as email format
        if [ ! -z \"$$ADMIN_USERNAME\" ] && ! echo \"$$ADMIN_USERNAME\" | grep -E '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$$' > /dev/null; then
          echo '‚ùå Error: Invalid admin username email format'
          exit 1
        fi

        # Validate [optional] password length
        if [ ! -z \"$$ADMIN_PASSWORD\" ] &&  [ $${#ADMIN_PASSWORD} -lt 8 ]; then
          echo '‚ùå Error: Password must be at least 8 characters long'
          exit 1
        fi

        echo '‚úÖ Environment variables validated'

        # Run modular orchestrator (refactored system)
        if [ -f "/host-setup/orchestrator/build-compose.sh" ]; then
          echo 'üîß Running modular orchestrator...'
          # Ensure required tools for orchestrator and generated scripts
          apk add --no-cache bash gettext curl docker-cli openssl || true

          # Derive COMPONENTS if not provided
          if [ -z \"$$COMPONENTS\" ]; then
            echo \"[orchestrator] Auto-deriving COMPONENTS...\"
            COMPONENTS=\"pangolin,middleware-manager\"
            if [ -n \"$$CROWDSEC_ENROLLMENT_KEY\" ]; then
              echo \"[orchestrator] Adding crowdsec (CROWDSEC_ENROLLMENT_KEY is set)\"
              COMPONENTS=\"$$COMPONENTS,crowdsec\"
            fi
            if [ -n \"$$CLIENT_ID\" ] && [ -n \"$$CLIENT_SECRET\" ]; then
              echo \"[orchestrator] Adding mcpauth (CLIENT_ID and CLIENT_SECRET are set)\"
              COMPONENTS=\"$$COMPONENTS,mcpauth\"
            fi
            if [ -n \"$$OPENAI_API_KEY\" ] || [ -n \"$$AZURE_OPENAI_API_KEY\" ] || [ -n \"$$ANTHROPIC_API_KEY\" ] || [ -n \"$$GEMINI_API_KEY\" ]; then
              echo \"[orchestrator] Adding nlweb (AI_API_KEY is set)\"
              COMPONENTS=\"$$COMPONENTS,nlweb\"
            fi
            if [ -n \"$$KOMODO_HOST_IP\" ]; then
              echo \"[orchestrator] Adding komodo (KOMODO_HOST_IP is set)\"
              COMPONENTS=\"$$COMPONENTS,komodo\"
            fi
            export COMPONENTS
            echo \"[orchestrator] Auto-derived COMPONENTS: $$COMPONENTS\"
          else
            echo \"[orchestrator] Using provided COMPONENTS: $$COMPONENTS\"
          fi

          chmod +x /host-setup/orchestrator/build-compose.sh
          OUTPUT_DIR="/host-setup" COMPONENTS="$$COMPONENTS" /bin/bash /host-setup/orchestrator/build-compose.sh || exit 1
          echo '‚úÖ Orchestrator finished.'
          # Exit to avoid running legacy monolithic generation
          exit 0
        fi




      "
    restart: "no"