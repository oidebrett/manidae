  # Main Pangolin application
  pangolin:
    image:  docker.io/fosrl/pangolin:1.10.0
    #container_name: pangolin
    restart: unless-stopped
    volumes:
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/"]
      interval: "10s"
      timeout: "10s"
      retries: 15

  # Gerbil WireGuard management
  gerbil:
    image: fosrl/gerbil:1.2.1
    #container_name: gerbil
    restart: unless-stopped
    depends_on:
      pangolin:
        condition: service_healthy
    command:
      - --reachableAt=http://gerbil:3003
      - --generateAndSaveKeyTo=/var/config/key
      - --remoteConfig=http://pangolin:3001/api/v1/gerbil/get-config
      - --reportBandwidthTo=http://pangolin:3001/api/v1/gerbil/receive-bandwidth
    volumes:
      - ./config/:/var/config
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    ports:
      - 51820:51820/udp

  # Traefik reverse proxy
  traefik:
    image: traefik:v3.5
    #container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    command:
      - --configFile=/etc/traefik/traefik_config.yml
    volumes:
      - ./config/traefik:/etc/traefik:ro
      - ./config/letsencrypt:/letsencrypt
      - ./config/traefik/rules:/rules
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs/traefik:/var/log/traefik

  # PostgreSQL database
  pangolin-postgres:
    image: postgres:15-alpine
    #container_name: pangolin-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Chatkit Embed Service (replaces nlweb)
  chatkit-embed:
    image: oideibrett/chatkit-embed:latest
    #container_name: chatkit-embed
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PORT=8000
      - BACKEND_HOST=${BACKEND_HOST:-0.0.0.0}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
    driver: local
