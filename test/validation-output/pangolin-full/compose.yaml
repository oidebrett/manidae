services:
  # Main Pangolin application
  pangolin:
    image:  docker.io/fosrl/pangolin:1.8.0
    #container_name: pangolin
    restart: unless-stopped
    volumes:
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/"]
      interval: "10s"
      timeout: "10s"
      retries: 15
  # Gerbil WireGuard management
  gerbil:
    image: fosrl/gerbil:1.0.0
    #container_name: gerbil
    restart: unless-stopped
    depends_on:
      pangolin:
        condition: service_healthy
    command:
      - --reachableAt=http://gerbil:3003
      - --generateAndSaveKeyTo=/var/config/key
      - --remoteConfig=http://pangolin:3001/api/v1/gerbil/get-config
      - --reportBandwidthTo=http://pangolin:3001/api/v1/gerbil/receive-bandwidth
    volumes:
      - ./config/:/var/config
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    ports:
      - 51820:51820/udp
      - 21820:21820/udp
      - 443:443 # Port for traefik because of the network_mode
      - 80:80 # Port for traefik because of the network_mode

  # Traefik reverse proxy
  traefik:
    image: traefik:v3.4.1
    #container_name: traefik
    restart: unless-stopped
    network_mode: service:gerbil # Ports appear on the gerbil service
    depends_on:
      pangolin:
        condition: service_healthy
    command:
      - --configFile=/etc/traefik/traefik_config.yml
    volumes:
      - ./config/traefik:/etc/traefik:ro # Volume to store the Traefik configuration
      - ./config/letsencrypt:/letsencrypt # Volume to store the Lets Encrypt certificates
      - ./config/traefik/rules:/rules
      - ./config/traefik/logs:/var/log/traefik
      - ./public_html:/var/www/html:ro
  # Middleware Manager for Traefik / Pangolin
  middleware-manager:
    image: oideibrett/middleware-manager:v3.0.2-dev
    #container_name: middleware-manager
    restart: unless-stopped
    volumes:
      - ./data:/data
      - ./config/traefik/rules:/conf
      - ./config/middleware-manager:/app/config
      - ./config/traefik:/etc/traefik
    environment:
      - PANGOLIN_API_URL=http://pangolin:3001/api/v1
      - TRAEFIK_CONF_DIR=/conf
      - DB_PATH=/data/middleware.db
      - PORT=3456
      - ACTIVE_DATA_SOURCE=pangolin
      - TRAEFIK_STATIC_CONFIG_PATH=/etc/traefik/traefik_config.yml
      - PLUGINS_JSON_URL=https://raw.githubusercontent.com/hhftechnology/middleware-manager/traefik-int/plugin/plugins.json
# Static page component - no additional services required
# This component modifies existing Traefik configuration and creates static HTML files
  # --- Enhanced Traefik Log Dashboard with OTLP Support ---

  # Enhanced backend with multiple log sources and OTLP support
  backend:
    image: hhftechnology/traefik-log-dashboard-backend:latest
    #container_name: log-dashboard-backend
    restart: unless-stopped
    volumes:
      - ./config/traefik/logs:/logs:ro # Mount the Traefik logs directory
      - ./config/maxmind:/maxmind # Mount the Traefik logs directory
    
    ports:
      - "3001:3001"    # API port
      - "4317:4317"    # OTLP GRPC port
      - "4318:4318"    # OTLP HTTP port
    
    environment:
      # === MULTIPLE LOG FILES CONFIGURATION ===
      
      # Option 1: Comma-separated specific files
      - TRAEFIK_LOG_FILE=/logs/access.log,/logs/archived/access-2025.log

      # Option 2: Directory-based monitoring (alternative to specific files)
      # - TRAEFIK_LOG_PATH=/logs,/logs/archived,/logs/external
      
      # === OTLP CONFIGURATION ===
      - OTLP_ENABLED=true
      - OTLP_GRPC_PORT=4317
      - OTLP_HTTP_PORT=4318
      - OTLP_DEBUG=true
      - OTLP_FALLBACK_ENABLED=true
      
      # === GEOLOCATION ===
      - USE_MAXMIND=true
      - MAXMIND_DB_PATH=/maxmind/GeoLite2-City.mmdb
      - MAXMIND_FALLBACK_ONLINE=true
      
      # === PERFORMANCE TUNING ===
      - GOGC=50
      - GOMEMLIMIT=500MiB
      
  frontend:
    image: hhftechnology/traefik-log-dashboard-frontend:latest
    #container_name: log-dashboard-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
      - BACKEND_SERVICE=backend
      - BACKEND_PORT=3001
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Optional: MaxMind GeoIP Database Updater
  maxmind-updater:
    image: alpine:latest
    #container_name: maxmind-db-updater
    restart: "no"
    volumes:
      - ./config/maxmind:/data
    environment:
      - MAXMIND_LICENSE_KEY=${MAXMIND_LICENSE_KEY:-your-license-key-here}
    command: >
      sh -c "
        apk add --no-cache wget tar &&
        cd /data &&
        if [ ! -f GeoLite2-City.mmdb ] || [ $$(find . -name 'GeoLite2-City.mmdb' -mtime +7) ]; then
          echo 'Downloading/updating MaxMind database...' &&
          wget -O GeoLite2-City.tar.gz 'https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=$MAXMIND_LICENSE_KEY&suffix=tar.gz' &&
          tar --wildcards -xzf GeoLite2-City.tar.gz --strip-components=1 '*/GeoLite2-City.mmdb' &&
          rm -f GeoLite2-City.tar.gz &&
          echo 'MaxMind database updated successfully'
        else
          echo 'MaxMind database is up to date'
        fi
      "  # Auth management
  mcpauth:
    image: oideibrett/mcpauth:latest
    #container_name: mcpauth
    environment:
      - PORT=11000
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
      - OAUTH_DOMAIN=${OAUTH_DOMAIN:-oauth.${DOMAIN}}
      - ALLOWED_SCOPES=openid,email,profile
      - REQUIRED_SCOPES=openid,email
    restart: unless-stopped
    ports:
      - "11000:11000"
  crowdsec:
    image: crowdsecurity/crowdsec:latest
    #container_name: crowdsec
    environment:
      GID: "1000"
      COLLECTIONS: crowdsecurity/traefik crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-generic-rules crowdsecurity/linux
      ENROLL_INSTANCE_NAME: "pangolin-crowdsec"
      PARSERS: crowdsecurity/whitelists
      ENROLL_TAGS: docker
      ENROLL_KEY: ${CROWDSEC_ENROLLMENT_KEY}
    healthcheck:
      interval: 10s
      retries: 15
      timeout: 10s
      test: ["CMD", "cscli", "capi", "status"]
    labels:
      - "traefik.enable=false" # Disable traefik for crowdsec
    volumes:
      # crowdsec container data
      - ./config/crowdsec:/etc/crowdsec # crowdsec config
      - ./config/crowdsec/db:/var/lib/crowdsec/data # crowdsec db
      # log bind mounts into crowdsec
      - ./config/traefik/logs:/var/log/traefik # traefik logs
    ports:
      - 6060:6060 # metrics endpoint for prometheus
    restart: unless-stopped
    command: -t # Add test config flag to verify configuration
  nlweb:
    image:  oideibrett/nlweb:latest
    #container_name: nlweb
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - PORT=8000
      - NLWEB_CONFIG_DIR=/app/config
    volumes:
      - ./config/nlweb/data:/app/data
      - ./config/nlweb/nlweb_config:/app/config:ro
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8000')\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    user: root

  # Komodo Database Services
  postgres:
    image: ghcr.io/ferretdb/postgres-documentdb
    #container_name: komodo-postgres-1
    labels:
      komodo.skip: # Prevent Komodo from stopping with StopAllContainers
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  ferretdb:
    image: ghcr.io/ferretdb/ferretdb
    #container_name: komodo-ferretdb-1
    labels:
      komodo.skip: # Prevent Komodo from stopping with StopAllContainers
    restart: unless-stopped
    depends_on:
      - postgres
    volumes:
      - ferretdb-state:/state
    environment:
      FERRETDB_POSTGRESQL_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/postgres

  # Komodo Core
  komodo-core:
    image: ghcr.io/moghtech/komodo-core:${COMPOSE_KOMODO_IMAGE_TAG:-latest}
    #container_name: komodo-core-1
    labels:
      komodo.skip: # Prevent Komodo from stopping with StopAllContainers
    restart: unless-stopped
    depends_on:
      - ferretdb
    ports:
      - 9120:9120
    environment:
      KOMODO_DATABASE_ADDRESS: ferretdb:27017
      KOMODO_DATABASE_USERNAME: ${POSTGRES_USER}
      KOMODO_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      KOMODO_PASSKEY: ${KOMODO_PASSKEY}
      TZ: ${TZ:-Etc/UTC}
      KOMODO_HOST: https://komodo.${DOMAIN}
      KOMODO_TITLE: ${KOMODO_TITLE:-Komodo}
      KOMODO_FIRST_SERVER: ${KOMODO_FIRST_SERVER}
      KOMODO_DISABLE_CONFIRM_DIALOG: ${KOMODO_DISABLE_CONFIRM_DIALOG:-false}
      KOMODO_MONITORING_INTERVAL: ${KOMODO_MONITORING_INTERVAL:-15-sec}
      KOMODO_RESOURCE_POLL_INTERVAL: ${KOMODO_RESOURCE_POLL_INTERVAL:-1-hr}
      KOMODO_WEBHOOK_SECRET: ${KOMODO_WEBHOOK_SECRET}
      KOMODO_JWT_SECRET: ${KOMODO_JWT_SECRET}
      KOMODO_JWT_TTL: ${KOMODO_JWT_TTL:-1-day}
      KOMODO_LOCAL_AUTH: ${KOMODO_LOCAL_AUTH:-true}
      KOMODO_DISABLE_USER_REGISTRATION: ${KOMODO_DISABLE_USER_REGISTRATION:-false}
      KOMODO_ENABLE_NEW_USERS: ${KOMODO_ENABLE_NEW_USERS:-false}
      KOMODO_DISABLE_NON_ADMIN_CREATE: ${KOMODO_DISABLE_NON_ADMIN_CREATE:-false}
      KOMODO_TRANSPARENT_MODE: ${KOMODO_TRANSPARENT_MODE:-false}
      KOMODO_LOGGING_PRETTY: ${KOMODO_LOGGING_PRETTY:-false}
      KOMODO_PRETTY_STARTUP_CONFIG: ${KOMODO_PRETTY_STARTUP_CONFIG:-false}
      KOMODO_OIDC_ENABLED: ${KOMODO_OIDC_ENABLED:-false}
      KOMODO_GITHUB_OAUTH_ENABLED: ${KOMODO_GITHUB_OAUTH_ENABLED:-false}
      KOMODO_GOOGLE_OAUTH_ENABLED: ${KOMODO_GOOGLE_OAUTH_ENABLED:-false}
      KOMODO_AWS_ACCESS_KEY_ID: ${KOMODO_AWS_ACCESS_KEY_ID}
      KOMODO_AWS_SECRET_ACCESS_KEY: ${KOMODO_AWS_SECRET_ACCESS_KEY}
    volumes:
      - repo-cache:/repo-cache
volumes:
  # Komodo volumes
  postgres-data:
    driver: local
  ferretdb-state:
    driver: local
  repo-cache:
    driver: local
networks:
  default:
    driver: bridge
    #external: true
    name: manidae
    enable_ipv6: true
